library(ggplot2)
library(dplyr)
library(shiny)
shiny::runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
library(shiny)
library(plotly)
library(dplyr)
library(lubridate)
library(ggplot2)
install.packages("lubridate")
library(lubridate)
library(ggplot2)
library(ggmap)
install.packages("ggmap")
library(data.table)
library(ggrepel)
install.packages("ggrepl")
# library(rworldmap)
# library(rworldxtra)
library(maps)
library(mapdata)
install.packages("mapdata")
library(mapdata)
states <- map_data("state")
washington <- subset(states, region == "washington")
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-123, -121), ylim = c(47,48), ratio = 1.3) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
three_d <- ploy_ly(crime, x = crime$Longitude, y = crime$Latitude, z = crime$Reported.Time)
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
outout$threeDplot <- renderPlot()
}
shinyServer(server)
library(ggplot2)
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-123, -121), ylim = c(47,48), ratio = 1.3) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
library(lubridate)
library(ggplot2)
library(ggmap)
library(data.table)
library(ggrepel)
install.packages("ggrepl")
install.packages("ggrepel")
library(ggrepel)
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-123, -121), ylim = c(47,48), ratio = 1.3) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
three_d <- ploy_ly(crime, x = crime$Longitude, y = crime$Latitude, z = crime$Reported.Time)
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
outout$threeDplot <- renderPlot()
}
# ---- CRIME DATA ----
crime_data <- as.data.frame(read.csv("data/Crime_Data.csv"))
my_neigh_map <- as.data.frame(read.csv("data/My_Neighborhood_Map.csv"))
# capitalizing column Common.Name
my_neigh_map[,2] = toupper(my_neigh_map[,2])
setwd("C:/Users/NDH/INFO 201/Crime-vs-Weather")
# ---- CRIME DATA ----
crime_data <- as.data.frame(read.csv("data/Crime_Data.csv"))
my_neigh_map <- as.data.frame(read.csv("data/My_Neighborhood_Map.csv"))
# capitalizing column Common.Name
my_neigh_map[,2] = toupper(my_neigh_map[,2])
# changing Common.Name to Neighborhood so that it will merge properly
neigh_data <- my_neigh_map %>% rename(Neighborhood = Common.Name)
# mergign neighborhood data to crime data to get longitude and latitude
combined <- merge(x = crime_data, y = neigh_data, by = "Neighborhood", all.x = TRUE)
# filter out null values
crime <- combined %>% filter(!is.na(Longitude))
View(crime)
states <- map_data("state")
washington <- subset(states, region == "washington")
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-123, -121), ylim = c(47,48), ratio = 1.3) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
three_d <- plot_ly(crime,
x = ~Primary.Offense.Description, y = ~Reported.Date, z = ~Neighborhood, text = ~Crime.Subcategory, cex = input$opt.cex,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2)))
source("process_data.R")
three_d <- plot_ly(crime,
x = ~Primary.Offense.Description, y = ~Reported.Date, z = ~Neighborhood, text = ~Crime.Subcategory, cex = input$opt.cex,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2)))
three_d <- plot_ly(crime,
x = ~Primary.Offense.Description, y = ~Reported.Date, z = ~Neighborhood, text = ~Crime.Subcategory,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2)))
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
#outout$threeDplot <- renderPlot()
output$three_d <- renderPlot(three_d)
}
runApp()
three_d <- plot_ly(crime,
x = ~Primary.Offense.Description, y = ~Reported.Date, z = ~Neighborhood, text = ~Crime.Subcategory,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2)))
server <- function(input, output) {
#output$mapPlot <- renderPlot(washington_base)
#outout$threeDplot <- renderPlot()
output$three_d <- renderPlot(three_d)
}
shinyServer(server)
runApp()
ui <- fluidPage(
titlePanel("Crime vs Weather"),
sidebarLayout(
sidebarPanel(
sliderInput("date", "Date:",
min = 0, max = 1000,
value = 0),
sliderInput("zoom", "Zoom In/Out (%):",
min = 0, max = 100,
value = 100)),
mainPanel(
plotOutput("mapPlot"),
plotOutput("three_d")
)
)
)
runApp()
server <- function(input, output) {
#output$mapPlot <- renderPlot(washington_base)
#outout$threeDplot <- renderPlot()
output$plot <- renderPlotly({
# creates main 3d plot
plot_ly(crime,
x = crime$Crime.Subcategory, y = crime$Neighborhood, z = crime$Occurred.Date, text = crime$Primary.Offense.Description,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2
)
)
) %>%
layout(
title = "Crime Data of Washington ",
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
)
})
# adds in hovering info
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to get info about it!" else d
})
}
ui <- fluidPage(
titlePanel("Crime vs Weather"),
sidebarLayout(
sidebarPanel(
sliderInput("date", "Date:",
min = 0, max = 1000,
value = 0),
sliderInput("zoom", "Zoom In/Out (%):",
min = 0, max = 100,
value = 100)),
mainPanel(
#plotOutput("mapPlot"),
plotlyOutput(outputId = "plot", width = "105%")
)
)
)
runApp()
ui <- fluidPage(
titlePanel("Crime vs Weather"),
sidebarLayout(
sidebarPanel(
sliderInput("date", "Date:",
min = 0, max = 1000,
value = 0),
sliderInput("zoom", "Zoom In/Out (%):",
min = 0, max = 100,
value = 100)),
mainPanel(
plotOutput("mapPlot"),
plotlyOutput(outputId = "plot", width = "105%")
)
)
)
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-123, -121), ylim = c(47,48), ratio = 1.3) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
output$plot <- renderPlotly({
# creates main 3d plot
plot_ly(crime,
x = crime$Crime.Subcategory, y = crime$Neighborhood, z = crime$Occurred.Date, text = crime$Primary.Offense.Description,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2
)
)
) %>%
layout(
title = "Crime Data of Washington ",
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
)
})
# adds in hovering info
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to get info about it!" else d
})
}
runApp()
runApp()
runApp()
runApp()
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
output$plot <- renderPlotly({
# creates main 3d plot
plot_ly( crime,
x = crime$Crime.Subcategory, y = crime$Neighborhood, z = crime$Occurred.Date, type = "scatter3d", text = crime$Primary.Offense.Description,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2
)
)
) %>%
layout(
title = "Crime Data of Washington ",
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
)
})
# adds in hovering info
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to get info about it!" else d
})
}
runApp()
server <- function(input, output) {
output$mapPlot <- renderPlot(washington_base)
output$plot <- renderPlotly({
# creates main 3d plot
plot_ly( crime,
x = crime$Crime.Subcategory, y = crime$Neighborhood, z = crime$Occurred.Date,
type = "scatter3d", mode="markers", text = crime$Primary.Offense.Description,
marker = list(
size = 10,
color = "rgba(63, 191, 191, .9)",
line = list(
color = "rgba(152, 0, 0, 1)",
width = 2
)
)
) %>%
layout(
title = "Crime Data of Washington ",
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE)
)
})
# adds in hovering info
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to get info about it!" else d
})
}
runApp()
runApp()
