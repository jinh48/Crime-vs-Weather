library(ggplot2)
library(dplyr)
library(shiny)
shiny::runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
#creates 4 differents pies that represent the 4 seasons
spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Spring Crimes Pie Chart", cex = 1)
# Setting up the pie charts:
# create a new data frame for the purpose of the pie charts
crime_pie <- crime
# delete the year from all dates
crime_pie$Occurred.Date <- substring(crime_pie$Occurred.Date, 1, 5)
# change dates to Date format (automatically changes all years to 2018,
# so we can select by month & day only)
crime_pie$Occurred.Date <- as.Date(crime_pie$Occurred.Date, format = "%m/%d")
# separate data by season
spring <- crime_pie[crime_pie$Occurred.Date >= "2018-03-01" & crime_pie$Occurred.Date <= "2018-05-31",]
summer <- crime_pie[crime_pie$Occurred.Date >= "2018-06-01" & crime_pie$Occurred.Date <= "2018-09-01",]
autumn <- crime_pie[crime_pie$Occurred.Date >= "2018-10-01" & crime_pie$Occurred.Date <= "2018-11-30",]
winter <- crime_pie[crime_pie$Occurred.Date >= "2018-12-01" | crime_pie$Occurred.Date <= "2018-02-28",]
# create reusable function to make list of slice values for each season
make_slices <- function(df) {
df <- aggregate(df, by = list(df$Crime.Subcategory), FUN = NROW)
vector <- df[,3]
}
spring_slices <- make_slices(spring)
summer_slices <- make_slices(summer)
autumn_slices <- make_slices(spring)
winter_slices <- make_slices(winter)
labels <- as.vector(unique(crime_pie$Crime.Subcategory))
# remove  labels for categories with less than 3-digit counts,
# to make pie chart more readable
labels[nchar(spring_slices) < 4] = NA
percentages <- round(spring_slices / sum(spring_slices) * 100)
#creates 4 differents pies that represent the 4 seasons
spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Spring Crimes Pie Chart", cex = 1)
summer_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Summer Crimes Pie Chart", cex = 1)
autumn_pie <- spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Autumn Crimes Pie Chart", cex = 1)
winter_pie <- spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Winter Crimes Pie Chart", cex = 1)
#creates 4 differents pies that represent the 4 seasons
spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Spring Crimes Pie Chart", cex = 1)
autumn_pie <- spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Autumn Crimes Pie Chart", cex = 1)
# remove  labels for categories with less than 3-digit counts,
# to make pie chart more readable
labels[nchar(spring_slices) < 4] = NA
labels[nchar(summer_slices) < 4] = NA
labels[nchar(autumn_slices) < 4] = NA
labels[nchar(winter_slices) < 4] = NA
#creates 4 differents pies that represent the 4 seasons
spring_pie <- pie(spring_slices, labels = labels, col = rainbow(length(labels)),
main="Spring Crimes Pie Chart", cex = 1)
summer_pie <- pie(summer_slices, labels = labels, col = rainbow(length(labels)),
main="Summer Crimes Pie Chart", cex = 1)
autumn_pie <- pie(autumn_slices, labels = labels, col = rainbow(length(labels)),
main="Autumn Crimes Pie Chart", cex = 1)
winter_pie <- pie(winter_slices, labels = labels, col = rainbow(length(labels)),
main="Winter Crimes Pie Chart", cex = 1)
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
season_pie <- c(spring_pie, summer_pie, autumn_pie, winter_pie)
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
shiny::runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
shiny::runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
library(shiny)
library(plotly)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggmap)
library(data.table)
library(ggrepel)
# library(rworldmap)
# library(rworldxtra)
library(maps)
library(mapdata)
library(googleway) #ADDED FOR NEW MAP
source("process_data.R")
source("key.R")
# ---- SETTING UP WASHINGTON CRIME DATA ---- #
states <- map_data("state")
washington <- subset(states, region == "washington")
counties <- map_data("county")
wa_county <- subset(counties, region == "washington")
#map.seattle_city <- qmap("seattle", zoom = 11, source="stamen", maptype="toner",darken = c(.3,"#BBBBBB"))
washington_base <- ggplot(data = washington, mapping = aes(x = long, y = lat, group=group)) +
geom_polygon(fill = "palegreen", color = "black") +
coord_fixed(xlim = c(-122.00, -122.80), ylim = c(47.3,47.90), ratio = 1) +
theme_nothing() +
geom_polygon(data = wa_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) +
geom_point(data = crime, mapping = aes(x = crime$Longitude, y = crime$Latitude),
color = "red", inherit.aes = FALSE)
geom_tile(data = winter_rain_averages, aes(x = long, y = lat, alpha = values), fill = 'blue')
washington_base + geom_polygon(data = winter_rain_averages, aes(fill = values), color = "white") +
geom_polygon(color = "darkgreen", fill = NA) +
theme_void()
scale_fill_gradient(low = "darkgreen", high = "lightgreen")
# ---- SETTING UP PIE CHARTS FOR SEASON ---- #
# Setting up the pie charts:
# create a new data frame for the purpose of the pie charts
crime_pie <- crime
# delete the year from all dates
crime_pie$Occurred.Date <- substring(crime_pie$Occurred.Date, 1, 5)
# change dates to Date format (automatically changes all years to 2018,
# so we can select by month & day only)
crime_pie$Occurred.Date <- as.Date(crime_pie$Occurred.Date, format = "%m/%d")
# separate data by season
spring <- crime_pie[crime_pie$Occurred.Date >= "2018-03-01" & crime_pie$Occurred.Date <= "2018-05-31",]
summer <- crime_pie[crime_pie$Occurred.Date >= "2018-06-01" & crime_pie$Occurred.Date <= "2018-08-31",]
autumn <- crime_pie[crime_pie$Occurred.Date >= "2018-09-01" & crime_pie$Occurred.Date <= "2018-11-30",]
winter <- crime_pie[crime_pie$Occurred.Date >= "2018-12-01" | crime_pie$Occurred.Date <= "2018-02-28",]
# create reusable function to make list of slice values for each season
make_slices <- function(df) {
df <- aggregate(df, by = list(df$Crime.Subcategory), FUN = NROW)
vector <- df[,3]
}
spring_slices <- make_slices(spring)
summer_slices <- make_slices(summer)
autumn_slices <- make_slices(autumn)
winter_slices <- make_slices(winter)
labels <- as.vector(unique(crime_pie$Crime.Subcategory))
# remove  labels for categories with less than 3-digit counts,
# to make pie chart more readable
labels[nchar(spring_slices) < 4] = NA
labels[nchar(summer_slices) < 4] = NA
labels[nchar(autumn_slices) < 4] = NA
labels[nchar(winter_slices) < 4] = NA
# function to make pie
make_pie <- function(df, string, input, output) {
pie(df, labels = labels, col = rainbow(length(labels)),
main = paste0(string, " Crimes Pie Chart"), cex = 1)
lower <- tolower(string)
slices <- eval(as.name(paste0(lower, "_slices")))
sum <- sum(slices)
output$text <- renderText({
result <- switch (input$pie,
pickWinter = paste0("There were ", sum, " recorded crimes in ", lower, " from 2002 to 2017"),
pickSpring = paste0("There were ", sum, " recorded crimes in ", lower, " from 2002 to 2017"),
pickSummer = paste0("There were ", sum, " recorded crimes in ", lower, " from 2002 to 2017"),
pickFall = paste0("There were ", sum, " recorded crimes in ", lower, " from 2002 to 2017"))})
}
#-----------------------------------------------------------------------------
# NEW MAP FXN
#function to make map
make_map <- function(string) {
df <- eval(as.name(string))
df <- df[sample(nrow(df),1000),]
google_map(data = df) %>%
add_circles(lat = "Latitude", lon = "Longitude") %>%
add_heatmap(data = eval(as.name(paste0(string, "_rain_averages"))),
lat = "lat", lon = "long", weight = "values", option_radius = 0.05,
legend = T)
}
#-----------------------------------------------------------------------------
# ---- SERVER FUNCTIONS ---- #
server <- function(input, output) {
#output$mapPlot <- renderPlot(washington_base)
output$mapPlot <- renderGoogle_map({
result <- switch(input$pie,
pickWinter = make_map("winter"),
pickSpring = make_map("spring"),
pickSummer = make_map("summer"),
pickFall = make_map("autumn"))
})
output$piePlot <- renderPlot({
result <- switch(input$pie,
pickWinter = make_pie(winter_slices, "Winter", input, output),
pickSpring = make_pie(spring_slices, "Spring", input, output),
pickSummer = make_pie(summer_slices, "Summer", input, output),
pickFall = make_pie(autumn_slices, "Autumn", input, output))
})
output$plot3d <- renderPlotly({
#
# spring <- crime_rain[crime_rain$Occurred.Date >= "2018-03-01" & crime_rain$Occurred.Date <= "2018-05-31",]
# summer <- crime_rain[crime_rain$Occurred.Date >= "2018-06-01" & crime_rain$Occurred.Date <= "2018-08-31",]
# autumn <- crime_rain[crime_rain$Occurred.Date >= "2018-09-01" & crime_rain$Occurred.Date <= "2018-11-30",]
# winter <- crime_rain[crime_rain$Occurred.Date >= "2018-12-01" | crime_rain$Occurred.Date <= "2018-02-28",]
p <- plot_ly(crime_rain, x = ~Air.Temperature, y = ~values, z = ~x, text = ~date, colors = "#BF382A") %>% #text = ~date,
# add_markers() %>%
layout(scene = list(xaxis = list(title = 'Air Temperature'),
yaxis = list(title = 'Rain Percipitation'),
zaxis = list(title = 'Number of Crimes')))
})
}
shinyServer(server)
library(shiny)
library(shiny)
library(shinyWidgets)
library(rsconnect)
ui <- fluidPage(
setBackgroundColor(
color = "#f9f1f1"
),
titlePanel("Crime vs Weather"),
sidebarLayout(
sidebarPanel(
# sliderInput("date", "Date:",
#             min = 0, max = 1000,
#             value = 0),
selectInput("pie", "Select Season:",
c("Winter" = "pickWinter", "Spring" = "pickSpring",
"Summer" = "pickSummer", "Fall" = "pickFall"))),
mainPanel(
h4("The link between crime and precipitation is
almost ubiquitously agreed upon in the world of criminology.
If the relationship between crime and weather is determined to a sufficient degree of
accuracy, police resources can be allocated in a predictive manner throughout the year, saving time,
taxpayer money, and possibly even lives. In Seattle, a city with an extremely uneven distribution of
crime, any predictions we can make about where and when to send police resources is valuable information.", style = "background-color:white"),
google_mapOutput(outputId = "mapPlot"),
plotOutput("piePlot"),
h2(textOutput("text")),
plotlyOutput("plot3d")
)
)
)
shinyUI(ui)
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
shiny::runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
library(shiny)
library(plotly)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggmap)
library(data.table)
library(ggrepel)
# library(rworldmap)
# library(rworldxtra)
library(maps)
library(mapdata)
library(googleway) #ADDED FOR NEW MAP
library(shiny)
library(shinyWidgets)
library(rsconnect)
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
runApp('C:/Users/NDH/INFO 201/Crime-vs-Weather')
crime_names <- read.csv("data/crime.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("C:/Users/NDH/INFO 201/Crime-vs-Weather")
crime_names <- read.csv("data/crime.csv", header = TRUE, stringsAsFactors = FALSE)
View(crime_names)
df_c_n <- aggregate(crime_names[,7], list(crime_names$Crime.Subcategory), FUN = length) %>% as.data.frame()
View(df_c_n)
select_names <- crime_names %>% select(Occurred.Date, Crime.Subcategory) %>% group_by(Crime.Subcategory) %>% nrows()
select_names <- crime_names %>% select(Occurred.Date, Crime.Subcategory) %>% group_by(Crime.Subcategory) %>%
summarise(n = n())
View(select_names)
select_names <- crime_names %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
View(select_names)
qone <- crime_pie[crime_pie$Occurred.Date >= "2018-03-01" & crime_pie$Occurred.Date <= "2018-05-31",]
qone <- crime_names[crime_names$Occurred.Date >= "2018-03-01" & crime_names$Occurred.Date <= "2018-05-31",]
qtwo <- crime_pie[crime_names$Occurred.Date >= "2018-06-01" & crime_names$Occurred.Date <= "2018-08-31",]
qthree <- crime_names[crime_names$Occurred.Date >= "2018-09-01" & crime_names$Occurred.Date <= "2018-11-30",]
qfour <- crime_names[crime_names$Occurred.Date >= "2018-12-01" | crime_names$Occurred.Date <= "2018-02-28",]
View(qone)
crime_names$Occurred.Date <- as.Date(crime_names$Occurred.Date, format = "%m/%d/%Y")
View(crime_names)
qone <- crime_names[crime_names$Occurred.Date >= "2018-03-01" & crime_names$Occurred.Date <= "2018-05-31",]
View(qone)
qtwo <- crime_pie[crime_names$Occurred.Date >= "2018-06-01" & crime_names$Occurred.Date <= "2018-08-31",]
qthree <- crime_names[crime_names$Occurred.Date >= "2018-09-01" & crime_names$Occurred.Date <= "2018-11-30",]
qfour <- crime_names[crime_names$Occurred.Date >= "2018-12-01" | crime_names$Occurred.Date <= "2018-02-28",]
View(qfour)
qfour <- crime_names[crime_names$Occurred.Date >= "2018-12-01" | crime_names$Occurred.Date <= "2018-02-28",]
View(qone)
sum_one <- qone %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
View(sum_one)
sum_one <- qone %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
sum_two <- qtwo %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
sum_three <- qthree %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
sum_four <- qfour %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
View(sum_four)
View(sum_one)
View(sum_three)
sum_two <- qtwo %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
qtwo <- crime_pie[crime_names$Occurred.Date >= "2018-06-01" & crime_names$Occurred.Date <= "2018-08-31",]
qtwo <- crime_names[crime_names$Occurred.Date >= "2018-06-01" & crime_names$Occurred.Date <= "2018-08-31",]
sum_two <- qtwo %>% group_by(Crime.Subcategory) %>% select(Occurred.Date, Crime.Subcategory) %>%
summarise(n = n())
View(sum_four)
View(sum_one)
runApp()
View(sum_one)
runApp()
quarters <- c(sum_one, sum_two, sum_three, sum_four)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
